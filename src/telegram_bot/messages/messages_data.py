from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, \
    InlineKeyboardButton, Message, ReplyKeyboardMarkup, KeyboardButton

from src.database import Database
from src.database.models.app_user_model import AppUserModel
from src.database.tables.database_app_user import DatabaseAppUser
from src.database.tables.database_search_params_user import DatabaseSearchParamsUser
from src.telegram_bot.messages.message_data_model import MessageDataModel
from src.telegram_bot.states.user import UserState


def get_start_message() -> MessageDataModel:
    return MessageDataModel(text=f"<b>üì® –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="search")],
                                [InlineKeyboardButton(text="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", callback_data="search_params")]
                            ]))


def get_search_params_message(app_user_data: AppUserModel, interlocutor_age_text: str) -> MessageDataModel:
    my_age_text: str = str(app_user_data.age) if app_user_data.age is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"
    return MessageDataModel(text="<b>‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</b>\n"
                                 f"- –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: <code>{my_age_text}</code>\n"
                                 f"- –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: <code>{interlocutor_age_text}</code>",
                            reply_markup=InlineKeyboardMarkup(
                                inline_keyboard=[
                                    [InlineKeyboardButton(text="‚úèÔ∏è –ú–æ–π –≤–æ–∑—Ä–∞—Å—Ç", callback_data="set_my_age")],
                                    [InlineKeyboardButton(text="‚úèÔ∏è –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                                                          callback_data="set_interlocutor_age")],
                                    [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")],
                                ]
                            ))


def get_set_interlocutor_age_message() -> MessageDataModel:
    return MessageDataModel(text="‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="–¥–æ 17 –ª–µ—Ç",
                                                      callback_data="set_interlocutor_age:0-17")],
                                [InlineKeyboardButton(text="–æ—Ç 18 –¥–æ 24 –ª–µ—Ç",
                                                      callback_data="set_interlocutor_age:18-24")],
                                [InlineKeyboardButton(text="–æ—Ç 25 –¥–æ 32 –ª–µ—Ç",
                                                      callback_data="set_interlocutor_age:25-32")],
                                [InlineKeyboardButton(text="—Å—Ç–∞—Ä—à–µ 33 –ª–µ—Ç",
                                                      callback_data="set_interlocutor_age:33-100")],
                                [InlineKeyboardButton(text="–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è",
                                                      callback_data="set_interlocutor_age:0-100")],
                                [InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")],
                            ]))


async def send_search_params_message(user_id: int, bot: Bot, database: Database) -> Message:
    app_user = await DatabaseAppUser.init_user_from_telegram_id(database, user_id)
    search_params_data = await (
        await DatabaseSearchParamsUser.init_user(database, app_user.user_id)).get_search_params()
    if search_params_data.interlocutor_age is None:
        interlocutor_age_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
    else:
        interlocutor_age_text = f"–æ—Ç {search_params_data.interlocutor_age[0]} –¥–æ {search_params_data.interlocutor_age[-1]} –ª–µ—Ç"
    message_data = get_search_params_message(await app_user.get_user_data(), interlocutor_age_text)

    return await bot.send_message(user_id, message_data.text, reply_markup=message_data.reply_markup)


async def send_search_event(user_id: int, bot: Bot, state: FSMContext, database: Database) -> Message:
    my_state = await state.get_state()
    reply_markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å')]], resize_keyboard=True)
    if my_state == UserState.communicating:
        return await bot.send_message(user_id, "‚ùï –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ–±—â–µ–Ω–∏–∏!", reply_markup=reply_markup)
    elif my_state == UserState.in_search:
        return await bot.send_message(user_id, "‚ùï –í—ã —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ–¥–Ω–∏–∫–∞, –æ–∂–∏–¥–∞–π—Ç–µ...", reply_markup=reply_markup)

    app_user = await DatabaseAppUser.init_user_from_telegram_id(database, user_id)
    app_user_data = await app_user.get_user_data()
    if app_user_data.age is None:
        await state.clear()
        return await bot.send_message(user_id, "‚ùï –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç - /set_age")

    await state.set_state(UserState.in_search)

    await bot.send_message(user_id, "üîç –ò—â—É —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=reply_markup)
